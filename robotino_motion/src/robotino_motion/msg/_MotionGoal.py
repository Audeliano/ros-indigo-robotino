"""autogenerated by genpy from robotino_motion/MotionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotionGoal(genpy.Message):
  _md5sum = "6b3b2de3a7d0c9d9dae7915b94174a38"
  _type = "robotino_motion/MotionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
float32 move_x			# in meters
float32 move_y			# in meters
float32 move_phi		# in rad

uint8 movement_type		# 0 - translational ; 
				# 1 - Rotational; 
				# 2 - translational e rotational;
				# 3 - tangent

uint8 task_type			# 0 - align
				# 1 - move
				# 2 - count
				# 3 - follow

uint8 interruption_condition	# 0 - moved distance
				# 1 - high optical sensor signal
				# 2 - low optical sensor signal
				# 3 - high inductive sensor signal
				# 4 - low inductive sensor signal
				# 5 - camera (achieved object)
				# 6 - obstacle
				# 7 - bumper
				# 8 - time
				# 9 - secured distance sensor signal

uint8 alignment_device		# 0 - none
				# 1 - infrared sensor
				# 2 - optical sensor
				# 3 - inductive sensor
				# 4 - camera
				# 5 - ultrassonic
				# 6 - compass


"""
  __slots__ = ['move_x','move_y','move_phi','movement_type','task_type','interruption_condition','alignment_device']
  _slot_types = ['float32','float32','float32','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       move_x,move_y,move_phi,movement_type,task_type,interruption_condition,alignment_device

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.move_x is None:
        self.move_x = 0.
      if self.move_y is None:
        self.move_y = 0.
      if self.move_phi is None:
        self.move_phi = 0.
      if self.movement_type is None:
        self.movement_type = 0
      if self.task_type is None:
        self.task_type = 0
      if self.interruption_condition is None:
        self.interruption_condition = 0
      if self.alignment_device is None:
        self.alignment_device = 0
    else:
      self.move_x = 0.
      self.move_y = 0.
      self.move_phi = 0.
      self.movement_type = 0
      self.task_type = 0
      self.interruption_condition = 0
      self.alignment_device = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f4B.pack(_x.move_x, _x.move_y, _x.move_phi, _x.movement_type, _x.task_type, _x.interruption_condition, _x.alignment_device))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.move_x, _x.move_y, _x.move_phi, _x.movement_type, _x.task_type, _x.interruption_condition, _x.alignment_device,) = _struct_3f4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f4B.pack(_x.move_x, _x.move_y, _x.move_phi, _x.movement_type, _x.task_type, _x.interruption_condition, _x.alignment_device))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.move_x, _x.move_y, _x.move_phi, _x.movement_type, _x.task_type, _x.interruption_condition, _x.alignment_device,) = _struct_3f4B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f4B = struct.Struct("<3f4B")
