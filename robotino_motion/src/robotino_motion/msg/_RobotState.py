"""autogenerated by genpy from robotino_motion/RobotState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotState(genpy.Message):
  _md5sum = "1ce27d93bbb071574472c2f04aeb02ca"
  _type = "robotino_motion/RobotState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 d_x	#in meters/second
float32 d_y	#in meters/second
float32 d_phi	#in rad/second
bool loaded	#if true, there is a puck at robotino's grabber

"""
  __slots__ = ['d_x','d_y','d_phi','loaded']
  _slot_types = ['float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       d_x,d_y,d_phi,loaded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.d_x is None:
        self.d_x = 0.
      if self.d_y is None:
        self.d_y = 0.
      if self.d_phi is None:
        self.d_phi = 0.
      if self.loaded is None:
        self.loaded = False
    else:
      self.d_x = 0.
      self.d_y = 0.
      self.d_phi = 0.
      self.loaded = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3fB.pack(_x.d_x, _x.d_y, _x.d_phi, _x.loaded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.d_x, _x.d_y, _x.d_phi, _x.loaded,) = _struct_3fB.unpack(str[start:end])
      self.loaded = bool(self.loaded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3fB.pack(_x.d_x, _x.d_y, _x.d_phi, _x.loaded))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.d_x, _x.d_y, _x.d_phi, _x.loaded,) = _struct_3fB.unpack(str[start:end])
      self.loaded = bool(self.loaded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3fB = struct.Struct("<3fB")
